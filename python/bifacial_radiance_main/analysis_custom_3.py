    def analysis_custom_3(self, octfile, name, frontpts, backpts,
                     plotflag=False, accuracy='low', RGB=False,
                     accelerad = False, path = None):
            """
            
            Edited version of analysis. Edited by ingebrh. The change is that
            the function takes in the full front and back sensor point strings
            that were previously created inside the analysis function, instead
            of the frontscan and backscan dictionaries. It also skips all the
            fine adjustments to the output file and just saves it for later.
            The method formatandsavecsv needs to be called by the user to turn
            the output files into the regular bifacial_radiance .csv format.
            
            Changes from original analysis function:
                - Name changed from 'analysis' to 'analysis_custom_2'
                - Inputs 'frontscan' and 'backscan' replaced by 'frontpts'
                  and 'backpts'
                - Changed the call to _irrplot to _irrplot_custom
                - Added accelerad parameter for using accelerad or not in
                  _irrplot_custom, and added description in docstring
                - removed all formatting for the .csv
            
            
            General analysis function, where linepts are passed in for calling the
            raytrace routine :py:class:`~bifacial_radiance.AnalysisObj._irrPlot` 
            and saved into results with 
            :py:class:`~bifacial_radiance.AnalysisObj._saveResults`.
    
            
            Parameters
            ------------
            octfile : string
                Filename and extension of .oct file
            name : string 
                Name to append to output files
            frontpts : string generated by analysisobj._linePtsMakeDict with
                       frontscan as input
            backtpts : string generated by analysisobj._linePtsMakeDict with
                       backscan as input
            plotflag : boolean
                Include plot of resulting irradiance
            accuracy : string 
                Either 'low' (default - faster) or 'high' (better for low light)
            RGB : Bool
                If the raytrace is a spectral raytrace and information for the three channe
                wants to be saved, set RGB to True.
            accelerad : Bool
                Use accelerad rtrace or not
    
                
            Returns
            -------
             File saved in `\\results\\irr_name.csv`
    
            """
    
            if octfile is None:
                print('Analysis aborted - no octfile \n')
                return None, None
            if frontpts is not None:
                frontDict = self._irrPlot_custom_2(octfile, frontpts, name+'_Front',
                                            plotflag=plotflag, accuracy=accuracy,
                                            accelerad = accelerad)
                
                
                frontfilename = path + '\\' + name + '_Front' + '.txt'
                file = open(frontfilename, 'w')
                file.write(frontDict)
                file.close()
                print('File saved in \n' + frontfilename)
            #bottom view.
            
            if backpts is not None:
                backDict = self._irrPlot_custom_2(octfile, backpts, name+'_Back',
                                           plotflag=plotflag, accuracy=accuracy,
                                           accelerad = accelerad)
                
                backfilename = path + '\\' + name + '_Back' + '.txt'
                file = open(backfilename, 'w')
                file.write(backDict)
                file.close()
                print('File saved in \n' + backfilename)
                
            return None
